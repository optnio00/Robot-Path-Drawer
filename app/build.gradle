apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.1"

    defaultConfig {
        applicationId "com.tricktekno.optnio.oblu"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        jackOptions {
            enabled true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.0.1'
   // compile 'org.greenrobot:eventbus:3.0.0'
    compile "com.android.support:support-v4:25.0.1"
    compile "com.android.support:support-v13:25.0.1"
    compile "com.android.support:cardview-v7:25.0.1"
    compile "com.android.support:appcompat-v7:25.0.1"
    compile 'com.google.android.gms:play-services-appindexing:8.4.0'
    compile 'com.github.clans:fab:1.6.4'
    compile 'de.greenrobot:eventbus:2.4.0'
    final DESIGN_LIBRARY_VERSION = '25.0.1'
    final FABOPTIONS_VERSION = '1.0.2'

    compile "com.android.support:design:$DESIGN_LIBRARY_VERSION"
    //    compile "com.github.joaquimley:faboptions:$FABOPTIONS_VERSION"
    compile project(':faboptions')
    compile 'com.melnykov:floatingactionbutton:1.3.0'
}

// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
        'main',     // main sample code; look here for the interesting stuff.
        'common',   // components that are reused by multiple samples
        'template'] // boilerplate code that is generated by the sample template process

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.1"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    sourceSets {
        main {
            dirs.each { dir ->
                java.srcDirs "src/${dir}/java"
                res.srcDirs "src/${dir}/res"
            }
        }
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']

    }

}

